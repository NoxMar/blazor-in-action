@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/maxlength/{MaxLength:int}"
@using BlazingTrails.Shared.Contracts

@inject IMediator Mediator

<PageTitle>Search Trails - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Search Results for "@SearchTerm"</h3>
<SearchFilter SearchTerm="@SearchTerm" MaxLength="MaxLength" MaxTime="MaxTime"/>
@if (_searchResults == null)
{
    <p>Loading search results...</p>
}
else
{
    <TrailDrawer Trail="_selectedTrail" />
    <div class="grid">
        @foreach (var trail in _searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected"/>
        }
    </div>
}

@code {
    private IEnumerable<Trail>? _searchResults = default!;
    private IEnumerable<Trail> _searchResultsCache = default!;
    private Trail? _selectedTrail;
    
    [Parameter]
    public string SearchTerm { get; set; } = default!;
    
    [Parameter, SupplyParameterFromQuery]
    public int? MaxLength { get; set; }
    
    [Parameter, SupplyParameterFromQuery]
    public int? MaxTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Mediator.Send(new GetTrailsRequest());
            var allTrails = response.Trails
                .Select( t => t.Adapt<Trail>());
            _searchResultsCache = allTrails
                .Where(t => t.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
                            t.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
            _searchResults = _searchResultsCache;
        }
        catch (HttpRequestException) { }
    }

    protected override void OnParametersSet()
    {
        _searchResults = _searchResultsCache;
        if (MaxLength is not null)
        {
            _searchResults = _searchResults
                .Where(t => t.LengthKm <= MaxLength);
        }

        if (MaxTime is not null)
        {
            _searchResults = _searchResults
                .Where(t => t.TimeInMinutes <= MaxTime * 60);
        }
    }

    private void HandleTrailSelected(Trail trail)
        => _selectedTrail = trail;

}