@page "/search/{SearchTerm}"
@page "/search/{SearchTerm}/maxlength/{MaxLength:int}"

@inject ITrailsService TrailsService;

<PageTitle>Search Trails - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Serach Results for "@SearchTerm"</h3>

@if (_searchResults == null)
{
    <p>Loading search results...</p>
}
else
{
    <TrailDetails Trail="_selectedTrail" />
    <div class="grid">
        @foreach (var trail in _searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected"/>
        }
    </div>
}

@code {
    private IEnumerable<Trail>? _searchResults = default!;
    private Trail? _selectedTrail;
    
    [Parameter]
    public string SearchTerm { get; set; } = default!;
    
    [Parameter]
    public int? MaxLength { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allTrails = await TrailsService.GetAllTrailsAsync();
            _searchResults = allTrails
                .Where(t => t.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
                            t.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
            if (MaxLength is not null)
            {
                _searchResults = _searchResults
                    .Where(t => t.LengthKm <= MaxLength);
            }
        }
        catch (HttpRequestException) { }
    }

    private void HandleTrailSelected(Trail trail)
        => _selectedTrail = trail;

}