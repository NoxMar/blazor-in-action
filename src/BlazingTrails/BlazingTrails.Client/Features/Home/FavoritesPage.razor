@using BlazingTrails.Shared.Contracts
@inject IMediator Mediator
@inject AppState AppState

@page "/favorites"

<PageTitle>Your favorite trails</PageTitle>

<TrailCollection Trails="_trails"/>

@code {
    private List<Trail>? _trails;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var response = await Mediator
            .Send(new GetTrailsRequest());
        _trails = response.Trails
            .Where(t => AppState.FavoriteTrailsState.IsFavorite(new Trail{Id = t.Id}))
            .Select(t => t.Adapt<Trail>())
            .ToList();
        
        HashSet<int> existingIds = new(_trails.Select(t => t.Id));
        var favoriteTrailsCopy = AppState.FavoriteTrailsState.FavoriteTrails.ToList();
        foreach (var trail in favoriteTrailsCopy)
        {
            if (!existingIds.Contains(trail.Id))
            {
                await AppState.FavoriteTrailsState.RemoveFavorite(trail);
            }
        }
    }

}