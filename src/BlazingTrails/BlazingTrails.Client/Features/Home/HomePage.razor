@page "/"
@using BlazingTrails.Shared.Contracts
@inject IMediator Mediator

<PageTitle>Blazing Trials</PageTitle>

<TrailSearch />

@if (_trails is null)
{
    <p>Loading trails...</p>
}
else
{
    <TrailDetails Trail="_selectedTrail"/>
    <ViewSwitcher>
        <GridTemplate>
            <div class="grid">
                @foreach (var trial in _trails)
                {
                    <TrailCard Trail="trial" OnSelected="HandleTrailSelected"/>
                }
            </div>
        </GridTemplate>
        <TableTemplate>
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Location</th>
                    <th>Length</th>
                    <th>Time</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                    @foreach (var trail in _trails)
                    {
                        <tr>
                            <th scope="col">@trail.Name</th>
                            <td>@trail.Location</td>
                            <td>@trail.LengthKm</td>
                            <td>@trail.TimeFormatted</td>
                            <td>
                                <button class="btn btn-primary" title="View" @onclick="@(() => HandleTrailSelected(trail))">
                                    <span class="bi bi-binoculars"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </TableTemplate>
    </ViewSwitcher>
}

@code {

    private IEnumerable<Trail>? _trails;
    private Trail? _selectedTrail;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Mediator
                .Send(new GetTrailsRequest());
            _trails = response.Trails
                .Select(t => new ViewModels.Trail
                {
                    Id = t.Id,
                    Name = t.Name,
                    Image = t.Image,
                    Description = t.Description,
                    Location = t.Location,
                    LengthKm = t.Length,
                    Route = Array.Empty<RouteInstruction>(),
                    TimeInMinutes = t.TimeInMinutes
                });
        }
        catch (HttpRequestException)
        {
        }
    }

    private void HandleTrailSelected(Trail trail) 
        => _selectedTrail = trail;
}