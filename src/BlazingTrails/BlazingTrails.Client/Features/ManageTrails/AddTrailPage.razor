@page "/add-trail"
@inject IMediator Mediator

<PageTitle>Add Trail - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page"><a>Add Trail</a></li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Add a trail</h3>

@if (_submitSuccessful)
{
    <div class="alert alert-success" role="alert">
        <span class="bi bi-check-circle-fill"></span>
        Your trail has been submitted successfully!
    </div>
}
else if (!string.IsNullOrWhiteSpace(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <span class="bi bi-x-circle-fill"></span>
        @_errorMessage
    </div>
}

<EditForm Model="_trail" OnValidSubmit="SubmitForm">
    <FluentValidationValidator />
    
    <FormSection Title="Basic Details"
                 HelpText="This information is used to identify the trail and can be searched to help hikers find it.">
        <FormFieldSet Width="col-6">
            <label for="trailName" class="fw-bold text-secondary">Name</label>
            <InputText @bind-Value="_trail.Name" class="form-control" id="trailName"/>
            <ValidationMessage For="@(() => _trail.Name)"></ValidationMessage>
        </FormFieldSet>

        <FormFieldSet>
            <label for="trailDescription" class="fw-bold text-secondary">Description</label>
            <InputTextArea @bind-Value="_trail.Description" class="form-control" id="trailDescription"/>
            <ValidationMessage For="@(() => _trail.Description)"></ValidationMessage>
        </FormFieldSet>

        <FormFieldSet Width="col-6">
            <label for="trailLocation" class="fw-bold text-secondary">Location</label>
            <InputText @bind-Value="_trail.Location" class="form-control" id="trailLocation"/>
            <ValidationMessage For="@(() => _trail.Location)"></ValidationMessage>
        </FormFieldSet>
    </FormSection>

    <FormSection Title="Difficulty"
                 HelpText="Help other hikers out by telling them of the trail is how long it might take them.">

        <FormFieldSet Width="col-3">
            <label for="trailLength"
                   class="fw-bold text-secondary">Length (km)</label>
            <InputNumber @bind-Value="_trail.LengthKm"
                         class="form-control" id="trailLength"/>
            <ValidationMessage For="@(() => _trail.LengthKm)" />
        </FormFieldSet>
    </FormSection>

    <FormSection Title="Route Instructions"
                 HelpText="Route instructions are a guide for the trail. This helps hikers new to the trail stay on track.">
        @{ var i = 0; }
        @foreach (var routeInstruction in _trail.Route)
        {
            i++;
            routeInstruction.Stage = i;
            <div class="row">
                <div class="col-2">
                    <div class="form-group">
                        <label class="fw-bold text-secondary">Stage</label>
                        <p>@routeInstruction.Stage</p>
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="routeInstructionDescription"
                               class="fw-bold text-secondary">Description</label>
                        <InputText @bind-Value="routeInstruction.Description"
                                   class="form-control"
                                   id="routeInstructionDescription"></InputText>
                        <ValidationMessage For="@(() => routeInstruction.Description)" />
                    </div>
                </div>

                <div class="col-1 d-flex mt-3">
                    <button @onclick="() => _trail.Route.Remove(routeInstruction)"
                            class="btn btn-link"
                            type="button">
                        <i class="bi bi-x-circle-fill text-danger"></i>
                    </button>
                </div>
            </div>
        }
        <div class="row">
            <div class="col">
                <button class="btn btn-outline-primary"
                        type="button"
                        @onclick="@(() => _trail.Route.Add(new TrailDto.RouteInstruction()))">Add Instruction
                </button>
                <ValidationMessage For="@(() => _trail.Route)" />
            </div>
        </div>
    </FormSection>
    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-right">
                <button class="btn btn-outline-secondary"
                        type="button"
                        @onclick="@(() => _trail = new TrailDto())">Reset</button>
                <button class="btn btn-primary"
                        type="submit">Submit</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private TrailDto _trail = new();
    private bool _submitSuccessful;
    private string _errorMessage = string.Empty;

    private async Task SubmitForm()
    {
        var response = await Mediator.Send(new AddTrailRequest(_trail));
        if (response.TrailId == -1)
        {
            _errorMessage = "There was a problem saving your trail.";
            _submitSuccessful = false;
            return;
        }

        _trail = new();
        _errorMessage = string.Empty;
        _submitSuccessful = true;
    }
}